{"ast":null,"code":"var _jsxFileName = \"/Users/onkarbk/eth-ipfs/src/App.js\";\nimport { Table, Container, Button, Form } from 'react-bootstrap';\nimport React from 'react';\nimport { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nvar CryptoJS = require(\"crypto-js\"); //import detectEthereumProvider from '@metamask/detect-provider';\n\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onClick = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting...\"\n        }); // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        }); //await for getTransactionReceipt\n\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } //try\n      catch (error) {\n        console.log(error);\n      } //catch\n\n    };\n\n    this.handleChange = async event => {\n      this.setState({\n        value: event.target.value\n      }); //var recEmail = this.state.value;\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0]; // const gas = await storehash.methods.sendHash( this.state.ipfsHash ).estimateGas();\n      //Set recepient's email\n\n      const recEmail = this.state.value;\n      alert('Recepient Email: ' + recEmail); //bring in user's metamask account address\n      // const accounts = await web3.eth.getAccounts();\n      // console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n\n      const ethAddress = await storehash.options.address;\n      this.setState({\n        ethAddress\n      }); //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        }); //Encryption\n\n        const ipfsHashOG = this.state.ipfsHash;\n        var ciphertext = CryptoJS.AES.encrypt(ipfsHashOG, 'my-secret-key@123');\n        console.log(\"encrypted text\", ciphertext.toString());\n        var bytes = CryptoJS.AES.decrypt(ciphertext.toString(), 'my-secret-key@123');\n        var decryptedData = bytes.toString(CryptoJS.enc.Utf8);\n        console.log(\"Decrypted text\", decryptedData); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: account\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({\n            transactionHash\n          });\n        }); // console.log(result);\n        // storehash.methods.sendHash(this.state.ipfsHash).send({\n        //   from: {addr} \n        // }, (error, transactionHash) => {\n        //   console.log(transactionHash);\n        //   this.setState({transactionHash});\n        // }); //storehash \n      }); //await ipfs.add \n    };\n  }\n\n  //onSubmit \n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, \" Ethereum and InterPlanetary File System(IPFS) with Create React App\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, \" Choose file to send to IPFS \"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, \"Recepient's Email:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 12\n      }\n    }, \"Send it\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }, \" Get Transaction Receipt \"), /*#__PURE__*/React.createElement(Table, {\n      class: \"table\",\n      bordered: true,\n      responsive: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 19\n      }\n    }, \"Tx Receipt Category\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    }, \"Values\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 19\n      }\n    }, \"IPFS Hash # stored on Eth Contract\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    }, this.state.ipfsHash)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    }, \"Ethereum Contract Address\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }, this.state.ethAddress)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 19\n      }\n    }, \"Tx Hash # \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 19\n      }\n    }, this.state.transactionHash)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 19\n      }\n    }, \"Block Number # \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 19\n      }\n    }, this.state.blockNumber)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 19\n      }\n    }, \"Gas Used\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 19\n      }\n    }, this.state.gasUsed))))));\n  } //render\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/onkarbk/eth-ipfs/src/App.js"],"names":["Table","Container","Button","Form","React","Component","web3","ipfs","storehash","CryptoJS","require","App","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onClick","eth","getTransactionReceipt","err","console","log","error","handleChange","value","onSubmit","accounts","ethereum","enable","account","recEmail","alert","options","address","add","hash","ipfsHashOG","ciphertext","AES","encrypt","toString","bytes","decrypt","decryptedData","enc","Utf8","methods","sendHash","send","render"],"mappings":"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","sourcesContent":["import {Table, Container, Button, Form } from 'react-bootstrap';\nimport React from 'react';\nimport { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nvar CryptoJS = require(\"crypto-js\");\n//import detectEthereumProvider from '@metamask/detect-provider';\n\nclass App extends Component {\n \n  state = {\n    ipfsHash:null,\n    buffer:'',\n    ethAddress:'',\n    blockNumber:'',\n    transactionHash:'',\n    gasUsed:'',\n    txReceipt: ''   \n  };\n \n  captureFile =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)    \n    };\n\n  convertToBuffer = async(reader) => {\n    //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result);\n    //set this buffer -using es6 syntax\n      this.setState({buffer});\n  };\n\n  onClick = async () => {\n\n  try{\n      this.setState({blockNumber:\"waiting..\"});\n      this.setState({gasUsed:\"waiting...\"});\n\n      // get Transaction Receipt in console on click\n      // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n      await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n        console.log(err,txReceipt);\n        this.setState({txReceipt});\n      }); //await for getTransactionReceipt\n\n      await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n      await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n    } //try\n  catch(error){\n      console.log(error);\n    } //catch\n} //onClick\n\n  handleChange = async (event) => {\n    this.setState({value: event.target.value});\n    //var recEmail = this.state.value;\n  }\n  \n\n\n  onSubmit = async (event) => {\n      event.preventDefault();\n\n      const accounts = await window.ethereum.enable();\n\n      const account = accounts[0];\n      // const gas = await storehash.methods.sendHash( this.state.ipfsHash ).estimateGas();\n      //Set recepient's email\n      \n      const recEmail = this.state.value; \n      alert('Recepient Email: ' + recEmail );\n    \n    //bring in user's metamask account address\n    // const accounts = await web3.eth.getAccounts();\n   \n    // console.log('Sending from Metamask account: ' + accounts[0]);\n\n    //obtain contract address from storehash.js\n    const ethAddress= await storehash.options.address;\n    this.setState({ethAddress});\n\n    //save document to IPFS,return its hash#, and set hash# to state\n    //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        //Encryption\n        const ipfsHashOG = this.state.ipfsHash;\n        var ciphertext = CryptoJS.AES.encrypt(ipfsHashOG, 'my-secret-key@123');\n        console.log(\"encrypted text\", ciphertext.toString());\n\n        var bytes = CryptoJS.AES.decrypt(ciphertext.toString(), 'my-secret-key@123');\n        var decryptedData = bytes.toString(CryptoJS.enc.Utf8);\n        console.log(\"Decrypted text\", decryptedData);\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        storehash.methods.sendHash( this.state.ipfsHash ).send({\n          from:account}, (error, transactionHash) => {\n            console.log(transactionHash);\n            this.setState({transactionHash});\n          })\n\n        // console.log(result);\n\n\n      \n        // storehash.methods.sendHash(this.state.ipfsHash).send({\n        //   from: {addr} \n        // }, (error, transactionHash) => {\n        //   console.log(transactionHash);\n        //   this.setState({transactionHash});\n        // }); //storehash \n      }) //await ipfs.add \n    }; //onSubmit \n\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Ethereum and InterPlanetary File System(IPFS) with Create React App</h1>\n        </header>\n        \n        <hr />\n\n      <Container>\n        <h3> Choose file to send to IPFS </h3>\n        <Form onSubmit={this.onSubmit}>\n          <input \n            type = \"file\"\n            onChange = {this.captureFile}\n          />\n          {/* Enter the email of the recepient */}\n            <label>\n              Recepient's Email:\n            <input type=\"text\" value={this.state.value} onChange={(this.handleChange)} />\n            </label>\n            {/* <input type=\"submit\" value=\"Submit\" /> */}\n           <Button \n           bsStyle=\"primary\" \n           type=\"submit\"> \n           Send it \n           </Button>\n        </Form>\n\n        <hr/>\n          <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n\n            <Table class=\"table\" bordered responsive>\n              <thead>\n                <tr>\n                  <th>Tx Receipt Category</th>\n                  <th>Values</th>\n                </tr>\n              </thead>\n             \n              <tbody>\n                <tr>\n                  <td>IPFS Hash # stored on Eth Contract</td>\n                  <td>{this.state.ipfsHash}</td>\n                </tr>\n                <tr>\n                  <td>Ethereum Contract Address</td>\n                  <td>{this.state.ethAddress}</td>\n                </tr>\n\n                <tr>\n                  <td>Tx Hash # </td>\n                  <td>{this.state.transactionHash}</td>\n                </tr>\n\n                <tr>\n                  <td>Block Number # </td>\n                  <td>{this.state.blockNumber}</td>\n                </tr>\n\n                <tr>\n                  <td>Gas Used</td>\n                  <td>{this.state.gasUsed}</td>\n                </tr>                \n              </tbody>\n          </Table>\n      </Container>\n   </div>\n    );\n  } //render\n}\n\nexport default App;        "]},"metadata":{},"sourceType":"module"}